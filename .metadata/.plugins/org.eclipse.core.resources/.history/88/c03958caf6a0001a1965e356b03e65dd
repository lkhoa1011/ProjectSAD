package system.booking.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.retry.annotation.Recover;
import org.springframework.retry.annotation.Retryable;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.retry.annotation.Backoff;
import org.springframework.retry.annotation.Recover;
import org.springframework.retry.annotation.Retryable;
import org.springframework.stereotype.Service;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;

@RestController
public class MainServiceController {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(MainServiceController.class);
    private static int COUNTER = 0;
    @Retryable(
            value = {TypeOneException.class, TypeTwoException.class},
            maxAttempts = 4, backoff = @Backoff(2000))
    public String retryWhenException() throws TypeOneException, TypeTwoException {
        COUNTER++;
        LOGGER.info("COUNTER = " + COUNTER);
        if(COUNTER == 1)
            throw new TypeOneException();
        else if(COUNTER == 2)
            throw new TypeTwoException();
        else
            throw new RuntimeException();
    }
    @Recover
    public String recover(Throwable t) {
        LOGGER.info("SampleRetryService.recover");
        return "Error Class :: " + t.getClass().getName();
    }
	
	
	
//	 private static final Logger LOGGER = LoggerFactory.getLogger(MainServiceController.class);
//	 
//	 private static final String MAIN_SERVICE = "mainService";
//	 
//	 @Autowired
//	 private RestTemplate restTemplate;
//	 
//	 @Bean
//	 public RestTemplate getRestTemplate() {
//		 return new RestTemplate();
//	 }
//	 
//	 @GetMapping("/getSleuthTest")
//	 @ResponseStatus(HttpStatus.OK)
//	 @CircuitBreaker(name = MAIN_SERVICE)
//	 public ResponseEntity<String> getSleutest(){
//		 LOGGER.info("I'm here in main service calling service one");
//		 String response = restTemplate.getForObject("http://localhost:9810/serviceOne", String.class);
//		 return new ResponseEntity<String>(response ,HttpStatus.OK);
//	 }
//	 private ResponseEntity<String> testFallBack(Exception e) {
//		return new ResponseEntity<String>("I'm fallback method", HttpStatus.INTERNAL_SERVER_ERROR);
//	}
}
